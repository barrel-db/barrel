error: badarg
[{io,format,
     [<0.61.0>,"state is ~p~n",
      {state_t,"/Users/benoitc/BarrelProject/barrel",
          {dict,25,16,16,8,80,48,
              {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},
              {{[],
                [[{locks,default},
                  {<<"backoff">>,
                   {pkg,<<"backoff">>,<<"1.1.6">>,
                       <<"83B72ED2108BA1EE8F7D1C22E0B4A00CFE3593A67DBC792799E8CCE9F42F796B">>},
                   1},
                  {<<"barrel_core">>,
                   {path,"core",{mtime,<<"2018-10-23T20:26:33Z">>}},
                   0},
                  {<<"barrel_replicator">>,
                   {path,"replicator",{mtime,<<"2018-10-22T14:44:29Z">>}},
                   0},
                  {<<"base58">>,
                   {git,"https://github.com/aeternity/erl-base58.git",
                       {ref,"7f6e917bd7d53d005af28057a2bc424848230516"}},
                   1},
                  {<<"ehash">>,
                   {pkg,<<"ehash">>,<<"0.2.1">>,
                       <<"B3F73406C19FBA8ACE6598DB0B6252B0ECA5D8B3C0606CA7D69FAF6BAF442710">>},
                   1},
                  {<<"gproc">>,
                   {pkg,<<"gproc">>,<<"0.8.0">>,
                       <<"CEA02C578589C61E5341FCE149EA36CCEF236CC2ECAC8691FBA408E7EA77EC2F">>},
                   1},
                  {<<"hooks">>,
                   {pkg,<<"hooks">>,<<"2.0.1">>,
                       <<"1C1FF88BFDA7460D2A4C6894DFF94AD83287B7CC2B5AC0FEF808B189843F0F6B">>},
                   1},
                  {<<"quickrand">>,
                   {pkg,<<"quickrand">>,<<"1.7.4">>,
                       <<"F91F34469D6AC153B951BB34DD9C78029882426BD61E12B85E5EE465850C08ED">>},
                   2},
                  {<<"recon">>,
                   {pkg,<<"recon">>,<<"2.3.4">>,
                       <<"B406C2FCCDEAA0D94E23B5E30AE3D635A2D461E363A5C9C6316897037CF050D2">>},
                   1},
                  {<<"uuid">>,
                   {pkg,<<"uuid_erl">>,<<"1.7.4">>,
                       <<"4EC01367FEDFBAEEB9D9BC88B2D239D42CE5B53AD284741262F86B71EB82FBFA">>},
                   1},
                  {<<"worker_pool">>,
                   {pkg,<<"worker_pool">>,<<"3.1.1">>,
                       <<"A9BF27CFF366999784A3F0657F016CE3A57901490858CCA3FB3BE1208BF2110D">>},
                   1}],
                 [{deps,default},
                  {<<"barrel_core">>,{path,"core"}},
                  {<<"barrel_replicator">>,{path,"replicator"}},
                  {<<"barrel_core">>,
                   {path,"core",{mtime,<<"2018-10-23T20:26:33Z">>}},
                   0},
                  {<<"barrel_replicator">>,
                   {path,"replicator",{mtime,<<"2018-10-22T14:44:29Z">>}},
                   0}],
                 [{project_plugins,default}],
                 [{plugins,default},rebar3_path_deps]],
                [[dialyzer,
                  {warnings,
                      [no_missing_calls,race_conditions,no_return,
                       unmatched_returns,error_handling]},
                  {plt_apps,top_level_deps},
                  {plt_extra_apps,[]},
                  {plt_location,local},
                  {plt_prefix,"barrel"},
                  {base_plt_location,"."},
                  {base_plt_prefix,"barrel"}],
                 [caller|command_line],
                 [base_dir,47,85,115,101,114,115,47,98,101,110,111,105,116,99,
                  47,66,97,114,114,101,108,80,114,111,106,101,99,116,47,98,97,
                  114,114,101,108,47,95,98,117,105,108,100],
                 [deps_dir,112,108,117,103,105,110,115]],
                [[erl_opts,warn_unused_vars,warnings_as_errors,
                  warn_export_all,warn_shadow_vars,warn_unused_import,
                  warn_unused_function,warn_bif_clash,warn_unused_record,
                  warn_deprecated_function,warn_obsolete_guard,
                  strict_validation,warn_export_vars,warn_exported_vars,
                  debug_info],
                 [plugins,rebar3_path_deps],
                 [deps,
                  {barrel_core,{path,"core"}},
                  {barrel_replicator,{path,"replicator"}}],
                 [eunit_opts,{dir,"src"}],
                 [profiles,
                  {test,[{erl_opts,[{d,'TEST'}]},{extra_src_dirs,["test"]}]},
                  {prod,
                      [{relx,
                           [{sys_config,"./config/sys.config"},
                            {vm_args,"config/vm.args"},
                            {dev_mode,false},
                            {include_erts,true},
                            {extended_start_script,true},
                            {include_src,false},
                            {extended_start_script,true}]}]}],
                 [ct_compile_opts,warn_unused_vars,warn_export_all,
                  warn_shadow_vars,warn_unused_import,warn_unused_function,
                  warn_bif_clash,warn_unused_record,warn_deprecated_function,
                  warn_obsolete_guard,strict_validation,warn_export_vars,
                  warn_exported_vars,debug_info],
                 [ct_opts],
                 [cover_opts,verbose],
                 [xref_checks,undefined_function_calls,undefined_functions,
                  deprecated_function_calls,deprecated_functions],
                 [defines],
                 [overrides]],
                [[cover_enabled|true]],
                [[vsn_cache|
                  {dict,0,16,16,8,80,48,
                      {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},
                      {{[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]}}}],
                 [force,48]],
                [],[],
                [[relx,
                  {release,{barrel,"0.10.0"},[barrel]},
                  {sys_config,"config/sys.config"},
                  {dev_mode,true},
                  {include_erts,false},
                  {include_src,false},
                  {extended_start_script,true}]],
                [[{plugins,global},rebar3_hex,rebar3_run]],
                [],
                [[task,104,101,108,112]],
                [],[],[],[]}}},
          {dict,1,16,16,8,80,48,
              {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},
              {{[],[],[],
                [[all_plugin_deps,
                  "/Users/benoitc/BarrelProject/barrel/_checkouts/rebar3_path_deps/ebin",
                  "/Users/benoitc/BarrelProject/barrel/_checkouts/rebar3_path_deps/ebin"]],
                [],[],[],[],[],[],[],[],[],[],[],[]}}},
          {dict,17,16,16,8,80,48,
              {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},
              {{[],
                [[{locks,default},
                  {<<"backoff">>,
                   {pkg,<<"backoff">>,<<"1.1.6">>,
                       <<"83B72ED2108BA1EE8F7D1C22E0B4A00CFE3593A67DBC792799E8CCE9F42F796B">>},
                   1},
                  {<<"barrel_core">>,
                   {path,"core",{mtime,<<"2018-10-23T20:26:33Z">>}},
                   0},
                  {<<"barrel_replicator">>,
                   {path,"replicator",{mtime,<<"2018-10-22T14:44:29Z">>}},
                   0},
                  {<<"base58">>,
                   {git,"https://github.com/aeternity/erl-base58.git",
                       {ref,"7f6e917bd7d53d005af28057a2bc424848230516"}},
                   1},
                  {<<"ehash">>,
                   {pkg,<<"ehash">>,<<"0.2.1">>,
                       <<"B3F73406C19FBA8ACE6598DB0B6252B0ECA5D8B3C0606CA7D69FAF6BAF442710">>},
                   1},
                  {<<"gproc">>,
                   {pkg,<<"gproc">>,<<"0.8.0">>,
                       <<"CEA02C578589C61E5341FCE149EA36CCEF236CC2ECAC8691FBA408E7EA77EC2F">>},
                   1},
                  {<<"hooks">>,
                   {pkg,<<"hooks">>,<<"2.0.1">>,
                       <<"1C1FF88BFDA7460D2A4C6894DFF94AD83287B7CC2B5AC0FEF808B189843F0F6B">>},
                   1},
                  {<<"quickrand">>,
                   {pkg,<<"quickrand">>,<<"1.7.4">>,
                       <<"F91F34469D6AC153B951BB34DD9C78029882426BD61E12B85E5EE465850C08ED">>},
                   2},
                  {<<"recon">>,
                   {pkg,<<"recon">>,<<"2.3.4">>,
                       <<"B406C2FCCDEAA0D94E23B5E30AE3D635A2D461E363A5C9C6316897037CF050D2">>},
                   1},
                  {<<"uuid">>,
                   {pkg,<<"uuid_erl">>,<<"1.7.4">>,
                       <<"4EC01367FEDFBAEEB9D9BC88B2D239D42CE5B53AD284741262F86B71EB82FBFA">>},
                   1},
                  {<<"worker_pool">>,
                   {pkg,<<"worker_pool">>,<<"3.1.1">>,
                       <<"A9BF27CFF366999784A3F0657F016CE3A57901490858CCA3FB3BE1208BF2110D">>},
                   1}],
                 [{deps,default},
                  {<<"barrel_core">>,{path,"core"}},
                  {<<"barrel_replicator">>,{path,"replicator"}},
                  {<<"barrel_core">>,
                   {path,"core",{mtime,<<"2018-10-23T20:26:33Z">>}},
                   0},
                  {<<"barrel_replicator">>,
                   {path,"replicator",{mtime,<<"2018-10-22T14:44:29Z">>}},
                   0}],
                 [{project_plugins,default}],
                 [{plugins,default},rebar3_path_deps]],
                [[dialyzer,
                  {warnings,
                      [no_missing_calls,race_conditions,no_return,
                       unmatched_returns,error_handling]},
                  {plt_apps,top_level_deps},
                  {plt_extra_apps,[]},
                  {plt_location,local},
                  {plt_prefix,"barrel"},
                  {base_plt_location,"."},
                  {base_plt_prefix,"barrel"}]],
                [[erl_opts,warn_unused_vars,warnings_as_errors,
                  warn_export_all,warn_shadow_vars,warn_unused_import,
                  warn_unused_function,warn_bif_clash,warn_unused_record,
                  warn_deprecated_function,warn_obsolete_guard,
                  strict_validation,warn_export_vars,warn_exported_vars,
                  debug_info],
                 [plugins,rebar3_path_deps],
                 [deps,
                  {barrel_core,{path,"core"}},
                  {barrel_replicator,{path,"replicator"}}],
                 [eunit_opts,{dir,"src"}],
                 [profiles,
                  {prod,
                      [{relx,
                           [{sys_config,"./config/sys.config"},
                            {vm_args,"config/vm.args"},
                            {dev_mode,false},
                            {include_erts,true},
                            {extended_start_script,true},
                            {include_src,false},
                            {extended_start_script,true}]}]}],
                 [ct_compile_opts,warn_unused_vars,warn_export_all,
                  warn_shadow_vars,warn_unused_import,warn_unused_function,
                  warn_bif_clash,warn_unused_record,warn_deprecated_function,
                  warn_obsolete_guard,strict_validation,warn_export_vars,
                  warn_exported_vars,debug_info],
                 [ct_opts],
                 [cover_opts,verbose],
                 [xref_checks,undefined_function_calls,undefined_functions,
                  deprecated_function_calls,deprecated_functions]],
                [[cover_enabled|true]],
                [],[],[],
                [[relx,
                  {release,{barrel,"0.10.0"},[barrel]},
                  {sys_config,"config/sys.config"},
                  {dev_mode,true},
                  {include_erts,false},
                  {include_src,false},
                  {extended_start_script,true}]],
                [[{plugins,global},rebar3_hex,rebar3_run]],
                [],[],[],[],[],[]}}},
          undefined,[],
          [default],
          default,[],
          {[],[]},
          undefined,[],[],
          [{app_info_t,<<"rebar3_path_deps">>,
               "/Users/benoitc/BarrelProject/barrel/_checkouts/rebar3_path_deps/src/rebar3_path_deps.app.src",
               undefined,
               "/Users/benoitc/BarrelProject/barrel/_checkouts/rebar3_path_deps/ebin/rebar3_path_deps.app",
               "0.2.0",root,
               [{description,"A rebar plugin to specify path dependencies. "},
                {vsn,"0.2.0"},
                {registered,[]},
                {applications,[kernel,stdlib]},
                {env,[]},
                {modules,
                    [rebar3_path_deps,rebar_git2_resource,
                     rebar_path_resource]},
                {maintainers,["Benoit Chesneauu"]},
                {licenses,["Apache 2.0"]},
                {links,
                    [{"Github",
                      "https://github.com/benoitc/rebar3_path_deps"}]}],
               [kernel,stdlib],
               [],
               [default,prod],
               {dict,5,16,16,8,80,48,
                   {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},
                   {{[],
                     [[{deps,default}],[{plugins,default}]],
                     [],
                     [[erl_opts,debug_info],[deps],[overrides]],
                     [],[],[],[],[],[],[],[],[],[],[],[]}}},
               {dict,5,16,16,8,80,48,
                   {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},
                   {{[],
                     [[{deps,default}],[{plugins,default}]],
                     [],
                     [[erl_opts,debug_info],[deps],[overrides]],
                     [],[],[],[],[],[],[],[],[],[],[],[]}}},
               0,
               "/Users/benoitc/BarrelProject/barrel/_checkouts/rebar3_path_deps",
               "/Users/benoitc/BarrelProject/barrel/_checkouts/rebar3_path_deps",
               undefined,checkout,false,true,true,undefined,false}],
          [],
          [rebar_compiler_xrl,rebar_compiler_yrl,rebar_compiler_mib,
           rebar_compiler_erl],
          [],
          [{resource,hg,rebar_hg_resource,#{},rebar_resource_v2},
           {resource,pkg,rebar_pkg_resource,
               #{base_config =>
                     #{http_adapter => hex_http_httpc,
                       http_adapter_config => #{profile => rebar},
                       http_user_agent_fragment =>
                           <<"(rebar3/3.7.0-rc2+build.4170.refa1120952) (httpc)">>},
                 repos =>
                     [#{api_url => <<"https://hex.pm/api">>,
                        http_adapter => hex_http_httpc,
                        http_adapter_config => #{profile => rebar},
                        http_user_agent_fragment =>
                            <<"(rebar3/3.7.0-rc2+build.4170.refa1120952) (httpc)">>,
                        name => <<"hexpm">>,
                        repo_public_key =>
                            <<"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApqREcFDt5vV21JVe2QNB\nEdvzk6w36aNFhVGWN5toNJRjRJ6m4hIuG4KaXtDWVLjnvct6MYMfqhC79HAGwyF+\nIqR6Q6a5bbFSsImgBJwz1oadoVKD6ZNetAuCIK84cjMrEFRkELtEIPNHblCzUkkM\n3rS9+DPlnfG8hBvGi6tvQIuZmXGCxF/73hU0/MyGhbmEjIKRtG6b0sJYKelRLTPW\nXgK7s5pESgiwf2YC/2MGDXjAJfpfCd0RpLdvd4eRiXtVlE9qO9bND94E7PgQ/xqZ\nJ1i2xWFndWa6nfFnRxZmCStCOZWYYPlaxr+FZceFbpMwzTNs4g3d4tLNUcbKAIH4\n0wIDAQAB\n-----END PUBLIC KEY-----">>,
                        repo_url => <<"https://repo.hex.pm">>,
                        repo_verify => true}]},
               rebar_resource_v2},
           {resource,git,rebar_git_resource,#{},rebar_resource_v2}],
          [{provider,xref,rebar_prv_xref,
               {[],[]},
               true,
               [compile],
               ["Run cross reference analysis.",10,10,86,97,108,105,100,32,
                114,101,98,97,114,46,99,111,110,102,105,103,32,111,112,116,
                105,111,110,115,58,10,32,32,
                [123,["xref_warnings",44,"false"],125],
                10,32,32,
                [123,["xref_extra_paths",44,"[]"],125],
                10,32,32,
                [123,
                 ["xref_checks",44,
                  [91,
                   ["undefined_function_calls",44,"undefined_functions",44,
                    "locals_not_used",44,10,
                    [32,[32,["   ",32,32,32],"   ",32,32,32],32,32],
                    "exports_not_used",44,"deprecated_function_calls",44,10,
                    [32,[32,["   ",32,32,32],"   ",32,32,32],32,32],
                    "deprecated_functions"],
                   93]],
                 125],
                10,32,32,
                [123,
                 ["xref_queries",44,
                  [91,
                   [[123,
                     ["\"(xc - uc) || (xu - x - b - (\\\"mod\\\":\\\".*foo\\\"/\\\"4\\\"))\"",
                      44,10,
                      [32,32,[[32,"   ",32,32,32],32,"   ",32,32,32],32,32],
                      "[]"],
                     125]],
                   93]],
                 125],
                10],
               "Run cross reference analysis.","rebar3 xref",[],
               [default],
               default},
           {provider,version,rebar_prv_version,
               {[],[]},
               true,[],"Print version for rebar and current Erlang.",
               "Print version for rebar and current Erlang.","rebar3 version",
               [],
               [default],
               default},
           {provider,upgrade,rebar_prv_upgrade,
               {[],[]},
               true,
               [lock],
               "Upgrade project dependencies. Mentioning no application will upgrade all dependencies. To upgrade specific dependencies, their names can be listed in the command.",
               "Upgrade dependencies.","rebar3 upgrade [cowboy[,ranch]]",
               [{package,undefined,undefined,string,
                    "List of packages to upgrade. If not specified, all dependencies are upgraded."}],
               [default],
               default},
           {provider,update,rebar_prv_update,
               {[],[]},
               true,[],"Update package index.","Update package index.",
               "rebar3 update",[],
               [default],
               default},
           {provider,unlock,rebar_prv_unlock,
               {[],[]},
               true,[],
               "Unlock project dependencies. Mentioning no application will unlock all dependencies. To unlock specific dependencies, their name can be listed in the command.",
               "Unlock dependencies.",[],
               [{package,undefined,undefined,string,
                    "List of packages to unlock. If not specified, all dependencies are unlocked."}],
               [default],
               default},
           {provider,tar,rebar_prv_tar,
               {[],[]},
               true,
               [release],
               "Tar archive of release built of project.",
               "Tar archive of release built of project.","rebar3 tar",
               [{relname,110,"relname",string,
                    "Specify the name for the release that will be generated"},
                {relvsn,118,"relvsn",string,
                    "Specify the version for the release"},
                {goal,103,"goal",string,
                    "Specify a target constraint on the system. These are usually the OTP"},
                {upfrom,117,"upfrom",string,
                    "Only valid with relup target, specify the release to upgrade from"},
                {output_dir,111,"output-dir",string,
                    "The output directory for the release. This is `./` by default."},
                {help,104,"help",undefined,"Print usage"},
                {lib_dir,108,"lib-dir",string,
                    "Additional dir that should be searched for OTP Apps"},
                {path,112,"path",string,
                    "Additional dir to add to the code path"},
                {default_libs,undefined,"default-libs",boolean,
                    "Whether to use the default system added lib dirs (means you must add them all manually). Default is true"},
                {log_level,86,"verbose",
                    {integer,2},
                    "Verbosity level, maybe between 0 and 3"},
                {dev_mode,100,"dev-mode",boolean,
                    "Symlink the applications and configuration into the release instead of copying"},
                {include_erts,105,"include-erts",string,
                    "If true include a copy of erts used to build with, if a path include erts at that path. If false, do not include erts"},
                {override,97,"override",string,
                    "Provide an app name and a directory to override in the form <appname>:<app directory>"},
                {config,99,"config",{string,[]},"The path to a config file"},
                {overlay_vars,undefined,"overlay_vars",string,
                    "Path to a file of overlay variables"},
                {vm_args,undefined,"vm_args",string,
                    "Path to a file to use for vm.args"},
                {sys_config,undefined,"sys_config",string,
                    "Path to a file to use for sys.config"},
                {system_libs,undefined,"system_libs",string,
                    "Path to dir of Erlang system libs"},
                {version,undefined,"version",undefined,"Print relx version"},
                {root_dir,114,"root",string,"The project root directory"}],
               [default],
               default},
           {provider,state,rebar_prv_state,
               {[],[]},
               false,[],"Display rebar configuration for debugging purpose",
               "Print current configuration state","rebar3 state",[],
               [default],
               default},
           {provider,shell,rebar_prv_shell,
               {[],[]},
               true,
               [compile],
               "Start a shell with project and deps preloaded similar to~n'erl -pa ebin -pa deps/*/ebin'.~n",
               "Run shell with project apps and deps in path.","rebar3 shell",
               [{config,undefined,"config",string,
                    "Path to the config file to use. Defaults to {shell, [{config, File}]} and then the relx sys.config file if not specified."},
                {name,undefined,"name",atom,"Gives a long name to the node."},
                {sname,undefined,"sname",atom,
                    "Gives a short name to the node."},
                {setcookie,undefined,"setcookie",atom,
                    "Sets the cookie if the node is distributed."},
                {script_file,undefined,"script",string,
                    "Path to an escript file to run before starting the project apps. Defaults to rebar.config {shell, [{script_file, File}]} if not specified."},
                {apps,undefined,"apps",string,
                    "A list of apps to boot before starting the shell. (E.g. --apps app1,app2,app3) Defaults to rebar.config {shell, [{apps, Apps}]} or relx apps if not specified."},
                {start_clean,undefined,"start-clean",boolean,
                    "Cancel any applications in the 'apps' list or release."},
                {user_drv_args,undefined,"user_drv_args",string,
                    "Arguments passed to user_drv start function for creating custom shells."}],
               [default],
               default},
           {provider,repos,rebar_prv_repos,
               {[],[]},
               false,[],
               "Display repository configuration for debugging purpose",
               "Print current package repository configuration",
               "rebar3 repos",[],
               [default],
               default},
           {provider,report,rebar_prv_report,
               {[],[]},
               true,[],
               "Provide a crash report to be sent to the rebar3 issues page.",
               "Provide a crash report to be sent to the rebar3 issues page.",
               "rebar3 report \"<task>\"",
               [{task,undefined,undefined,string,
                    "Task to print details for."}],
               [default],
               default},
           {provider,relup,rebar_prv_relup,
               {[],[]},
               true,
               [release],
               "Create relup of releases.","Create relup of releases.",
               "rebar3 relup",
               [{relname,110,"relname",string,
                    "Specify the name for the release that will be generated"},
                {relvsn,118,"relvsn",string,
                    "Specify the version for the release"},
                {goal,103,"goal",string,
                    "Specify a target constraint on the system. These are usually the OTP"},
                {upfrom,117,"upfrom",string,
                    "Only valid with relup target, specify the release to upgrade from"},
                {output_dir,111,"output-dir",string,
                    "The output directory for the release. This is `./` by default."},
                {help,104,"help",undefined,"Print usage"},
                {lib_dir,108,"lib-dir",string,
                    "Additional dir that should be searched for OTP Apps"},
                {path,112,"path",string,
                    "Additional dir to add to the code path"},
                {default_libs,undefined,"default-libs",boolean,
                    "Whether to use the default system added lib dirs (means you must add them all manually). Default is true"},
                {log_level,86,"verbose",
                    {integer,2},
                    "Verbosity level, maybe between 0 and 3"},
                {dev_mode,100,"dev-mode",boolean,
                    "Symlink the applications and configuration into the release instead of copying"},
                {include_erts,105,"include-erts",string,
                    "If true include a copy of erts used to build with, if a path include erts at that path. If false, do not include erts"},
                {override,97,"override",string,
                    "Provide an app name and a directory to override in the form <appname>:<app directory>"},
                {config,99,"config",{string,[]},"The path to a config file"},
                {overlay_vars,undefined,"overlay_vars",string,
                    "Path to a file of overlay variables"},
                {vm_args,undefined,"vm_args",string,
                    "Path to a file to use for vm.args"},
                {sys_config,undefined,"sys_config",string,
                    "Path to a file to use for sys.config"},
                {system_libs,undefined,"system_libs",string,
                    "Path to dir of Erlang system libs"},
                {version,undefined,"version",undefined,"Print relx version"},
                {root_dir,114,"root",string,"The project root directory"}],
               [default],
               default},
           {provider,release,rebar_prv_release,
               {[],[]},
               true,
               [compile],
               "Build release of project.","Build release of project.",
               "rebar3 release",
               [{relname,110,"relname",string,
                    "Specify the name for the release that will be generated"},
                {relvsn,118,"relvsn",string,
                    "Specify the version for the release"},
                {goal,103,"goal",string,
                    "Specify a target constraint on the system. These are usually the OTP"},
                {upfrom,117,"upfrom",string,
                    "Only valid with relup target, specify the release to upgrade from"},
                {output_dir,111,"output-dir",string,
                    "The output directory for the release. This is `./` by default."},
                {help,104,"help",undefined,"Print usage"},
                {lib_dir,108,"lib-dir",string,
                    "Additional dir that should be searched for OTP Apps"},
                {path,112,"path",string,
                    "Additional dir to add to the code path"},
                {default_libs,undefined,"default-libs",boolean,
                    "Whether to use the default system added lib dirs (means you must add them all manually). Default is true"},
                {log_level,86,"verbose",
                    {integer,2},
                    "Verbosity level, maybe between 0 and 3"},
                {dev_mode,100,"dev-mode",boolean,
                    "Symlink the applications and configuration into the release instead of copying"},
                {include_erts,105,"include-erts",string,
                    "If true include a copy of erts used to build with, if a path include erts at that path. If false, do not include erts"},
                {override,97,"override",string,
                    "Provide an app name and a directory to override in the form <appname>:<app directory>"},
                {config,99,"config",{string,[]},"The path to a config file"},
                {overlay_vars,undefined,"overlay_vars",string,
                    "Path to a file of overlay variables"},
                {vm_args,undefined,"vm_args",string,
                    "Path to a file to use for vm.args"},
                {sys_config,undefined,"sys_config",string,
                    "Path to a file to use for sys.config"},
                {system_libs,undefined,"system_libs",string,
                    "Path to dir of Erlang system libs"},
                {version,undefined,"version",undefined,"Print relx version"},
                {root_dir,114,"root",string,"The project root directory"}],
               [default],
               default},
           {provider,upgrade,rebar_prv_plugins_upgrade,
               {[],[]},
               true,[],"List or upgrade plugins","Upgrade plugins",
               "rebar3 plugins upgrade <plugin>",
               [{plugin,undefined,undefined,string,"Plugin to upgrade"}],
               [default],
               plugins},
           {provider,list,rebar_prv_plugins,
               {[],[]},
               true,[],"List local and global plugins for this project",
               "List local and global plugins for this project",
               "rebar3 plugins list",[],
               [default],
               plugins},
           {provider,path,rebar_prv_path,
               {[],[]},
               true,
               [app_discovery],
               "Print paths to build dirs in current profile.",
               "Print paths to build dirs in current profile.","rebar3 path",
               [{app,undefined,"app",string,
                    "Comma separated list of applications to return paths for."},
                {base,undefined,"base",boolean,
                    "Return the `base' path of the current profile."},
                {bin,undefined,"bin",boolean,
                    "Return the `bin' path of the current profile."},
                {ebin,undefined,"ebin",boolean,
                    "Return all `ebin' paths of the current profile's applications."},
                {lib,undefined,"lib",boolean,
                    "Return the `lib' path of the current profile."},
                {priv,undefined,"priv",boolean,
                    "Return the `priv' path of the current profile's applications."},
                {separator,115,"separator",string,
                    "In case of multiple return paths, the separator character to use to join them."},
                {src,undefined,"src",boolean,
                    "Return the `src' path of the current profile's applications."},
                {rel,undefined,"rel",boolean,
                    "Return the `rel' path of the current profile."}],
               [default],
               default},
           {provider,pkgs,rebar_prv_packages,
               {[],[]},
               true,[],
               ["List information for a package",46,10],
               "List information for a package.","rebar3 pkgs elli",
               [{package,undefined,undefined,string,
                    "Package to fetch information for."}],
               [default],
               default},
           {provider,new,rebar_prv_new,
               {[],[]},
               true,[],
               "Create rebar3 project based on template and vars.\n\nValid command line options:\n  <template> [var=foo,...]\n",
               "Create new project from templates.","rebar3 new <template>",
               [{force,102,"force",undefined,"overwrite existing files"}],
               [default],
               default},
           {provider,lock,rebar_prv_lock,
               {[],[]},
               false,
               [install_deps],
               "Locks dependencies","Locks dependencies.",[],[],
               [default],
               default},
           {provider,upgrade,rebar_prv_local_upgrade,
               {[],[]},
               true,[],[],"Download latest rebar3 escript and extract.",
               "rebar3 unstable upgrade",[],
               [default],
               local},
           {provider,install,rebar_prv_local_install,
               {[],[]},
               true,[],[],
               "Extract libs from rebar3 escript along with a run script.",
               "rebar3 unstable install",[],
               [default],
               local},
           {provider,install_deps,rebar_prv_install_deps,
               {[],[]},
               false,
               [app_discovery],
               [],[],undefined,[],
               [default],
               default},
           {provider,help,rebar_prv_help,
               {[],[]},
               true,[],
               "Display a list of tasks or help for a given task or subtask.",
               "Display a list of tasks or help for a given task or subtask.",
               "rebar3 help <task>",
               [{help_task,undefined,undefined,string,
                    "Task to print help for."}],
               [default],
               default},
           {provider,'get-deps',rebar_prv_get_deps,
               {[],[]},
               true,
               [lock],
               "Fetch project dependencies.","Fetch dependencies.",
               "rebar3 get-deps",[],[],default},
           {provider,eunit,rebar_prv_eunit,
               {[],[]},
               true,
               [lock],
               "Run EUnit Tests.","Run EUnit Tests.","rebar3 eunit",
               [{app,undefined,"app",string,
                    "Comma separated list of application test suites to run. Equivalent to `[{application, App}]`."},
                {application,undefined,"application",string,
                    "Comma separated list of application test suites to run. Equivalent to `[{application, App}]`."},
                {cover,99,"cover",boolean,
                    "Generate cover data. Defaults to false."},
                {cover_export_name,undefined,"cover_export_name",string,
                    "Base name of the coverdata file to write"},
                {dir,100,"dir",string,
                    "Comma separated list of dirs to load tests from. Equivalent to `[{dir, Dir}]`."},
                {file,102,"file",string,
                    "Comma separated list of files to load tests from. Equivalent to `[{file, File}]`."},
                {module,109,"module",string,
                    "Comma separated list of modules to load tests from. Equivalent to `[{module, Module}]`."},
                {suite,115,"suite",string,
                    "Comma separated list of modules to load tests from. Equivalent to `[{module, Module}]`."},
                {verbose,118,"verbose",boolean,
                    "Verbose output. Defaults to false."},
                {name,undefined,"name",atom,"Gives a long name to the node"},
                {sname,undefined,"sname",atom,
                    "Gives a short name to the node"},
                {setcookie,undefined,"setcookie",atom,
                    "Sets the cookie if the node is distributed"}],
               [test],
               default},
           {provider,escriptize,rebar_prv_escriptize,
               {[],[]},
               true,
               [compile],
               "Generate an escript executable containing the project's and its dependencies' BEAM files.",
               "Generate escript archive.","rebar3 escriptize",[],
               [default],
               default},
           {provider,edoc,rebar_prv_edoc,
               {[],[]},
               true,
               [compile],
               "Generate documentation using edoc.",
               "Generate documentation using edoc.","rebar3 edoc",[],
               [docs],
               default},
           {provider,do,rebar_prv_do,
               {[],[]},
               true,[],
               "Higher order provider for running multiple tasks in a sequence.",
               "Higher order provider for running multiple tasks in a sequence.",
               "rebar3 do <task1>, <task2>, ...",[],
               [default],
               default},
           {provider,dialyzer,rebar_prv_dialyzer,
               {[],[]},
               true,
               [compile],
               "Run the Dialyzer analyzer on the project.\n\nThis command will build, and keep up-to-date, a suitable PLT and will use it to carry out success typing analysis on the current project.\n\nThe following (optional) configurations can be added to a `proplist` of options `dialyzer` in rebar.config:\n`warnings` - a list of dialyzer warnings\n`get_warnings` - display warnings when altering a PLT file (boolean)\n`plt_apps` - the strategy for determining the applications which included in the PLT file, `top_level_deps` to include just the direct dependencies or `all_deps` to include all nested dependencies*\n`plt_extra_apps` - a list of extra applications to include in the PLT file\n`plt_extra_mods` - a list of extra modules to includes in the PLT file\n`plt_location` - the location of the PLT file, `local` to store in the profile's base directory (default) or a custom directory.\n`plt_prefix` - the prefix to the PLT file, defaults to \"rebar3\"**\n`base_plt_apps` - a list of applications to include in the base PLT file***\n`base_plt_mods` - a list of modules to include in the base PLT file***\n`base_plt_location` - the location of base PLT file, `global` to store in $HOME/.cache/rebar3 (default) or  a custom directory***\n`base_plt_prefix` - the prefix to the base PLT file, defaults to \"rebar3\"** ***\n`exclude_apps` - a list of applications to exclude from PLT files and success typing analysis, `plt_extra_mods` and `base_plt_mods` can add modules from excluded applications\n`exclude_mods` - a list of modules to exclude from PLT files and success typing analysis\n\nFor example, to warn on unmatched returns: \n{dialyzer, [{warnings, [unmatched_returns]}]}.\n\n*The direct dependent applications are listed in `applications` and `included_applications` of their .app files.\n**PLT files are named \"<prefix>_<otp_release>_plt\".\n***The base PLT is a PLT containing the core applications often required for a project's PLT. One base PLT is created per OTP version and stored in `base_plt_location`. A base PLT is used to build project PLTs.\n",
               "Run the Dialyzer analyzer on the project.","rebar3 dialyzer",
               [{update_plt,117,"update-plt",boolean,
                    "Enable updating the PLT. Default: true"},
                {succ_typings,115,"succ-typings",boolean,
                    "Enable success typing analysis. Default: true"}],
               [default],
               default},
           {provider,tree,rebar_prv_deps_tree,
               {[],[]},
               true,
               [lock],
               [],"Print dependency tree.","rebar3 tree",
               [{verbose,118,"verbose",undefined,
                    "Print repo and branch/tag/ref for git and hg deps"}],
               [default],
               default},
           {provider,deps,rebar_prv_deps,
               {[],[]},
               true,
               [app_discovery],
               "List dependencies. Those not matching lock files are followed by an asterisk (*).",
               "List dependencies","rebar3 deps",[],
               [default],
               default},
           {provider,cover,rebar_prv_cover,
               {[],[]},
               true,
               [lock],
               "Perform coverage analysis.","Perform coverage analysis.",
               "rebar3 cover",
               [{reset,114,"reset",boolean,"Reset all coverdata."},
                {verbose,118,"verbose",boolean,"Print coverage analysis."},
                {min_coverage,109,"min_coverage",integer,
                    "Mandate a coverage percentage required to succeed (0..100)"}],
               [test],
               default},
           {provider,compile,rebar_prv_compile,
               {[],[]},
               true,
               [lock],
               "Compile apps .app.src and .erl files.",
               "Compile apps .app.src and .erl files.","rebar3 compile",
               [{deps_only,100,"deps_only",undefined,
                    "Only compile dependencies, no project apps will be built."}],
               [default],
               default},
           {provider,ct,rebar_prv_common_test,
               {[],[]},
               true,
               [lock],
               "Run Common Tests.","Run Common Tests.","rebar3 ct",
               [{dir,undefined,"dir",string,
                    "List of additional directories containing test suites"},
                {suite,undefined,"suite",string,"List of test suites to run"},
                {group,undefined,"group",string,"List of test groups to run"},
                {testcase,undefined,"case",string,"List of test cases to run"},
                {label,undefined,"label",string,"Test label"},
                {config,undefined,"config",string,"List of config files"},
                {spec,undefined,"spec",string,"List of test specifications"},
                {join_specs,undefined,"join_specs",boolean,
                    "Merge all test specifications and perform a single test run"},
                {allow_user_terms,undefined,"allow_user_terms",boolean,
                    "Allow user defined config values in config files"},
                {logdir,undefined,"logdir",string,"Log folder"},
                {logopts,undefined,"logopts",string,
                    "Options for common test logging"},
                {verbosity,undefined,"verbosity",integer,"Verbosity"},
                {cover,99,"cover",{boolean,false},"Generate cover data"},
                {cover_export_name,undefined,"cover_export_name",string,
                    "Base name of the coverdata file to write"},
                {repeat,undefined,"repeat",integer,
                    "How often to repeat tests"},
                {duration,undefined,"duration",string,
                    "Max runtime (format: HHMMSS)"},
                {until,undefined,"until",string,"Run until (format: HHMMSS)"},
                {force_stop,undefined,"force_stop",string,
                    "Force stop on test timeout (true | false | skip_rest)"},
                {basic_html,undefined,"basic_html",boolean,"Show basic HTML"},
                {stylesheet,undefined,"stylesheet",string,
                    "CSS stylesheet to apply to html output"},
                {decrypt_key,undefined,"decrypt_key",string,
                    "Path to key for decrypting config"},
                {decrypt_file,undefined,"decrypt_file",string,
                    "Path to file containing key for decrypting config"},
                {abort_if_missing_suites,undefined,"abort_if_missing_suites",
                    {boolean,true},
                    "Abort if suites are missing"},
                {multiply_timetraps,undefined,"multiply_timetraps",integer,[]},
                {scale_timetraps,undefined,"scale_timetraps",boolean,
                    "Scale timetraps"},
                {create_priv_dir,undefined,"create_priv_dir",string,
                    "Create priv dir (auto_per_run | auto_per_tc | manual_per_tc)"},
                {include,undefined,"include",string,
                    "Directories containing additional include files"},
                {readable,undefined,"readable",string,
                    "Shows test case names and only displays logs to shell on failures (true | compact | false)"},
                {verbose,118,"verbose",boolean,"Verbose output"},
                {name,undefined,"name",atom,"Gives a long name to the node"},
                {sname,undefined,"sname",atom,
                    "Gives a short name to the node"},
                {setcookie,undefined,"setcookie",atom,
                    "Sets the cookie if the node is distributed"},
                {sys_config,undefined,"sys_config",string,
                    "List of application config files"},
                {compile_only,undefined,"compile_only",boolean,
                    "Compile modules in the project with the test configuration but do not run the tests"},
                {retry,undefined,"retry",boolean,
                    "Experimental feature. If any specification for previously failing test is found, runs them."}],
               [test],
               default},
           {provider,clean,rebar_prv_clean,
               {[],[]},
               true,
               [app_discovery,install_deps],
               "Remove compiled beam files from apps.",
               "Remove compiled beam files from apps.","rebar3 clean",
               [{all,97,"all",undefined,"Clean all apps include deps"},
                {profile,112,"profile",string,
                    "Clean under profile. Equivalent to `rebar3 as <profile> clean`"}],
               [default],
               default},
           {provider,compile,rebar_prv_bare_compile,
               {[],[]},
               false,
               [{default,app_discovery}],
               [],[],[],
               [{paths,112,"paths",string,
                    "Wildcard paths of ebin directories to add to code path, separated by a colon"},
                {separator,115,"separator",string,
                    "In case of multiple return paths, the separator character to use to join them."}],
               [default],
               bare},
           {provider,as,rebar_prv_as,
               {[],[]},
               true,[],
               "Higher order provider for running multiple tasks in a sequence as a certain profiles.",
               "Higher order provider for running multiple tasks in a sequence as a certain profiles.",
               "rebar3 as <profile1>,<profile2>,... <task1>, <task2>, ...",
               [{profile,undefined,undefined,string,"Profiles to run as."}],
               [default],
               default},
           {provider,app_discovery,rebar_prv_app_discovery,
               {[],[]},
               false,[],[],[],[],[],
               [default],
               default},
           {provider,run,rebar3_run,
               {[],[]},
               false,
               [release],
               [],"Run release console.","rebar3 run",[],
               [default],
               default},
           {provider,publish,rebar3_hex_pkg,
               {[],[]},
               true,
               [{default,lock}],
               [],
               "Publish a new version of your package and update the package",
               "rebar3 hex publish",
               [{revert,undefined,"revert",string,"Revert given version."}],
               [default],
               hex},
           {provider,search,rebar3_hex_search,
               {[],[]},
               true,[],[],"Display packages matching the given search query",
               "rebar3 hex search <term>",
               [{term,undefined,undefined,string,"Search term."}],
               [default],
               hex},
           {provider,docs,rebar3_hex_docs,
               {[],[]},
               true,
               [{default,edoc}],
               [],"Publish documentation for the current project and version",
               "rebar3 hex docs",
               [{revert,undefined,"revert",string,"Revert given version."}],
               [default],
               hex},
           {provider,owner,rebar3_hex_owner,
               {[],[]},
               true,[],[],"Add, remove or list package owners",
               "rebar3 hex owner",[],
               [default],
               hex},
           {provider,info,rebar3_hex_info,
               {[],[]},
               true,[],[],"Prints hex package or system information",
               "rebar3 hex user <command>",[],
               [default],
               hex},
           {provider,key,rebar3_hex_key,
               {[],[]},
               true,[],[],
               "Remove or list API keys associated with your account",
               "rebar3 hex key [list | remove <key>]",[],
               [default],
               hex},
           {provider,config,rebar3_hex_config,
               {[],[]},
               true,[],[],"Read or update hex configuration file",
               "rebar3 hex config <key> [<value>]",[],
               [default],
               hex},
           {provider,cut,rebar3_hex_cut,
               {[],[]},
               true,
               [{default,lock}],
               [],"Increment version number and publish package",
               "rebar3 hex cut",
               [{increment,105,"increment",string,
                    "Type of semver increment: major, minor or patch"}],
               [default],
               hex},
           {provider,user,rebar3_hex_user,
               {[],[]},
               true,[],[],"Hex user tasks","rebar3 hex user <command>",[],
               [default],
               hex}],
          false}],
     []},
 {rebar3_path_deps,init,1,
     [{file,
          "/Users/benoitc/BarrelProject/barrel/_checkouts/rebar3_path_deps/src/rebar3_path_deps.erl"},
      {line,10}]},
 {rebar_state,'-create_logic_providers/2-fun-0-',2,
     [{file,"/Users/benoitc/BarrelProject/rebar3/src/rebar_state.erl"},
      {line,479}]},
 {lists,foldl,3,[{file,"lists.erl"},{line,1263}]},
 {rebar_state,create_logic_providers,2,
     [{file,"/Users/benoitc/BarrelProject/rebar3/src/rebar_state.erl"},
      {line,478}]},
 {rebar_plugins,'-handle_plugins/4-fun-0-',4,
     [{file,"/Users/benoitc/BarrelProject/rebar3/src/rebar_plugins.erl"},
      {line,101}]},
 {lists,foldl,3,[{file,"lists.erl"},{line,1263}]},
 {rebar_plugins,handle_plugins,4,
     [{file,"/Users/benoitc/BarrelProject/rebar3/src/rebar_plugins.erl"},
      {line,99}]}]

{state_t,"/Users/benoitc/BarrelProject/barrel",
    {dict,25,16,16,8,80,48,
        {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},
        {{[],
          [[{locks,default},
            {<<"backoff">>,
             {pkg,<<"backoff">>,<<"1.1.6">>,
                 <<"83B72ED2108BA1EE8F7D1C22E0B4A00CFE3593A67DBC792799E8CCE9F42F796B">>},
             1},
            {<<"barrel_core">>,
             {path,"core",{mtime,<<"2018-10-23T20:26:33Z">>}},
             0},
            {<<"barrel_replicator">>,
             {path,"replicator",{mtime,<<"2018-10-22T14:44:29Z">>}},
             0},
            {<<"base58">>,
             {git,"https://github.com/aeternity/erl-base58.git",
                 {ref,"7f6e917bd7d53d005af28057a2bc424848230516"}},
             1},
            {<<"ehash">>,
             {pkg,<<"ehash">>,<<"0.2.1">>,
                 <<"B3F73406C19FBA8ACE6598DB0B6252B0ECA5D8B3C0606CA7D69FAF6BAF442710">>},
             1},
            {<<"gproc">>,
             {pkg,<<"gproc">>,<<"0.8.0">>,
                 <<"CEA02C578589C61E5341FCE149EA36CCEF236CC2ECAC8691FBA408E7EA77EC2F">>},
             1},
            {<<"hooks">>,
             {pkg,<<"hooks">>,<<"2.0.1">>,
                 <<"1C1FF88BFDA7460D2A4C6894DFF94AD83287B7CC2B5AC0FEF808B189843F0F6B">>},
             1},
            {<<"quickrand">>,
             {pkg,<<"quickrand">>,<<"1.7.4">>,
                 <<"F91F34469D6AC153B951BB34DD9C78029882426BD61E12B85E5EE465850C08ED">>},
             2},
            {<<"recon">>,
             {pkg,<<"recon">>,<<"2.3.4">>,
                 <<"B406C2FCCDEAA0D94E23B5E30AE3D635A2D461E363A5C9C6316897037CF050D2">>},
             1},
            {<<"uuid">>,
             {pkg,<<"uuid_erl">>,<<"1.7.4">>,
                 <<"4EC01367FEDFBAEEB9D9BC88B2D239D42CE5B53AD284741262F86B71EB82FBFA">>},
             1},
            {<<"worker_pool">>,
             {pkg,<<"worker_pool">>,<<"3.1.1">>,
                 <<"A9BF27CFF366999784A3F0657F016CE3A57901490858CCA3FB3BE1208BF2110D">>},
             1}],
           [{deps,default},
            {<<"barrel_core">>,{path,"core"}},
            {<<"barrel_replicator">>,{path,"replicator"}},
            {<<"barrel_core">>,
             {path,"core",{mtime,<<"2018-10-23T20:26:33Z">>}},
             0},
            {<<"barrel_replicator">>,
             {path,"replicator",{mtime,<<"2018-10-22T14:44:29Z">>}},
             0}],
           [{project_plugins,default}],
           [{plugins,default},rebar3_path_deps]],
          [[dialyzer,
            {warnings,
                [no_missing_calls,race_conditions,no_return,unmatched_returns,
                 error_handling]},
            {plt_apps,top_level_deps},
            {plt_extra_apps,[]},
            {plt_location,local},
            {plt_prefix,"barrel"},
            {base_plt_location,"."},
            {base_plt_prefix,"barrel"}],
           [caller|command_line],
           [base_dir,47,85,115,101,114,115,47,98,101,110,111,105,116,99,47,66,
            97,114,114,101,108,80,114,111,106,101,99,116,47,98,97,114,114,101,
            108,47,95,98,117,105,108,100],
           [deps_dir,112,108,117,103,105,110,115]],
          [[erl_opts,warn_unused_vars,warnings_as_errors,warn_export_all,
            warn_shadow_vars,warn_unused_import,warn_unused_function,
            warn_bif_clash,warn_unused_record,warn_deprecated_function,
            warn_obsolete_guard,strict_validation,warn_export_vars,
            warn_exported_vars,debug_info],
           [plugins,rebar3_path_deps],
           [deps,
            {barrel_core,{path,"core"}},
            {barrel_replicator,{path,"replicator"}}],
           [eunit_opts,{dir,"src"}],
           [profiles,
            {test,[{erl_opts,[{d,'TEST'}]},{extra_src_dirs,["test"]}]},
            {prod,
                [{relx,
                     [{sys_config,"./config/sys.config"},
                      {vm_args,"config/vm.args"},
                      {dev_mode,false},
                      {include_erts,true},
                      {extended_start_script,true},
                      {include_src,false},
                      {extended_start_script,true}]}]}],
           [ct_compile_opts,warn_unused_vars,warn_export_all,warn_shadow_vars,
            warn_unused_import,warn_unused_function,warn_bif_clash,
            warn_unused_record,warn_deprecated_function,warn_obsolete_guard,
            strict_validation,warn_export_vars,warn_exported_vars,debug_info],
           [ct_opts],
           [cover_opts,verbose],
           [xref_checks,undefined_function_calls,undefined_functions,
            deprecated_function_calls,deprecated_functions],
           [defines],
           [overrides]],
          [[cover_enabled|true]],
          [[vsn_cache|
            {dict,0,16,16,8,80,48,
                {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},
                {{[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]}}}],
           [force,48]],
          [],[],
          [[relx,
            {release,{barrel,"0.10.0"},[barrel]},
            {sys_config,"config/sys.config"},
            {dev_mode,true},
            {include_erts,false},
            {include_src,false},
            {extended_start_script,true}]],
          [[{plugins,global},rebar3_hex,rebar3_run]],
          [],
          [[task,104,101,108,112]],
          [],[],[],[]}}},
    {dict,1,16,16,8,80,48,
        {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},
        {{[],[],[],
          [[all_plugin_deps,
            "/Users/benoitc/BarrelProject/barrel/_checkouts/rebar3_path_deps/ebin",
            "/Users/benoitc/BarrelProject/barrel/_checkouts/rebar3_path_deps/ebin"]],
          [],[],[],[],[],[],[],[],[],[],[],[]}}},
    {dict,17,16,16,8,80,48,
        {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},
        {{[],
          [[{locks,default},
            {<<"backoff">>,
             {pkg,<<"backoff">>,<<"1.1.6">>,
                 <<"83B72ED2108BA1EE8F7D1C22E0B4A00CFE3593A67DBC792799E8CCE9F42F796B">>},
             1},
            {<<"barrel_core">>,
             {path,"core",{mtime,<<"2018-10-23T20:26:33Z">>}},
             0},
            {<<"barrel_replicator">>,
             {path,"replicator",{mtime,<<"2018-10-22T14:44:29Z">>}},
             0},
            {<<"base58">>,
             {git,"https://github.com/aeternity/erl-base58.git",
                 {ref,"7f6e917bd7d53d005af28057a2bc424848230516"}},
             1},
            {<<"ehash">>,
             {pkg,<<"ehash">>,<<"0.2.1">>,
                 <<"B3F73406C19FBA8ACE6598DB0B6252B0ECA5D8B3C0606CA7D69FAF6BAF442710">>},
             1},
            {<<"gproc">>,
             {pkg,<<"gproc">>,<<"0.8.0">>,
                 <<"CEA02C578589C61E5341FCE149EA36CCEF236CC2ECAC8691FBA408E7EA77EC2F">>},
             1},
            {<<"hooks">>,
             {pkg,<<"hooks">>,<<"2.0.1">>,
                 <<"1C1FF88BFDA7460D2A4C6894DFF94AD83287B7CC2B5AC0FEF808B189843F0F6B">>},
             1},
            {<<"quickrand">>,
             {pkg,<<"quickrand">>,<<"1.7.4">>,
                 <<"F91F34469D6AC153B951BB34DD9C78029882426BD61E12B85E5EE465850C08ED">>},
             2},
            {<<"recon">>,
             {pkg,<<"recon">>,<<"2.3.4">>,
                 <<"B406C2FCCDEAA0D94E23B5E30AE3D635A2D461E363A5C9C6316897037CF050D2">>},
             1},
            {<<"uuid">>,
             {pkg,<<"uuid_erl">>,<<"1.7.4">>,
                 <<"4EC01367FEDFBAEEB9D9BC88B2D239D42CE5B53AD284741262F86B71EB82FBFA">>},
             1},
            {<<"worker_pool">>,
             {pkg,<<"worker_pool">>,<<"3.1.1">>,
                 <<"A9BF27CFF366999784A3F0657F016CE3A57901490858CCA3FB3BE1208BF2110D">>},
             1}],
           [{deps,default},
            {<<"barrel_core">>,{path,"core"}},
            {<<"barrel_replicator">>,{path,"replicator"}},
            {<<"barrel_core">>,
             {path,"core",{mtime,<<"2018-10-23T20:26:33Z">>}},
             0},
            {<<"barrel_replicator">>,
             {path,"replicator",{mtime,<<"2018-10-22T14:44:29Z">>}},
             0}],
           [{project_plugins,default}],
           [{plugins,default},rebar3_path_deps]],
          [[dialyzer,
            {warnings,
                [no_missing_calls,race_conditions,no_return,unmatched_returns,
                 error_handling]},
            {plt_apps,top_level_deps},
            {plt_extra_apps,[]},
            {plt_location,local},
            {plt_prefix,"barrel"},
            {base_plt_location,"."},
            {base_plt_prefix,"barrel"}]],
          [[erl_opts,warn_unused_vars,warnings_as_errors,warn_export_all,
            warn_shadow_vars,warn_unused_import,warn_unused_function,
            warn_bif_clash,warn_unused_record,warn_deprecated_function,
            warn_obsolete_guard,strict_validation,warn_export_vars,
            warn_exported_vars,debug_info],
           [plugins,rebar3_path_deps],
           [deps,
            {barrel_core,{path,"core"}},
            {barrel_replicator,{path,"replicator"}}],
           [eunit_opts,{dir,"src"}],
           [profiles,
            {prod,
                [{relx,
                     [{sys_config,"./config/sys.config"},
                      {vm_args,"config/vm.args"},
                      {dev_mode,false},
                      {include_erts,true},
                      {extended_start_script,true},
                      {include_src,false},
                      {extended_start_script,true}]}]}],
           [ct_compile_opts,warn_unused_vars,warn_export_all,warn_shadow_vars,
            warn_unused_import,warn_unused_function,warn_bif_clash,
            warn_unused_record,warn_deprecated_function,warn_obsolete_guard,
            strict_validation,warn_export_vars,warn_exported_vars,debug_info],
           [ct_opts],
           [cover_opts,verbose],
           [xref_checks,undefined_function_calls,undefined_functions,
            deprecated_function_calls,deprecated_functions]],
          [[cover_enabled|true]],
          [],[],[],
          [[relx,
            {release,{barrel,"0.10.0"},[barrel]},
            {sys_config,"config/sys.config"},
            {dev_mode,true},
            {include_erts,false},
            {include_src,false},
            {extended_start_script,true}]],
          [[{plugins,global},rebar3_hex,rebar3_run]],
          [],[],[],[],[],[]}}},
    undefined,[],
    [default],
    default,[],
    {[],[]},
    undefined,[],[],
    [{app_info_t,<<"rebar3_path_deps">>,
         "/Users/benoitc/BarrelProject/barrel/_checkouts/rebar3_path_deps/src/rebar3_path_deps.app.src",
         undefined,
         "/Users/benoitc/BarrelProject/barrel/_checkouts/rebar3_path_deps/ebin/rebar3_path_deps.app",
         "0.2.0",root,
         [{description,"A rebar plugin to specify path dependencies. "},
          {vsn,"0.2.0"},
          {registered,[]},
          {applications,[kernel,stdlib]},
          {env,[]},
          {modules,[rebar3_path_deps,rebar_git2_resource,rebar_path_resource]},
          {maintainers,["Benoit Chesneauu"]},
          {licenses,["Apache 2.0"]},
          {links,[{"Github","https://github.com/benoitc/rebar3_path_deps"}]}],
         [kernel,stdlib],
         [],
         [default,prod],
         {dict,5,16,16,8,80,48,
             {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},
             {{[],
               [[{deps,default}],[{plugins,default}]],
               [],
               [[erl_opts,debug_info],[deps],[overrides]],
               [],[],[],[],[],[],[],[],[],[],[],[]}}},
         {dict,5,16,16,8,80,48,
             {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},
             {{[],
               [[{deps,default}],[{plugins,default}]],
               [],
               [[erl_opts,debug_info],[deps],[overrides]],
               [],[],[],[],[],[],[],[],[],[],[],[]}}},
         0,"/Users/benoitc/BarrelProject/barrel/_checkouts/rebar3_path_deps",
         "/Users/benoitc/BarrelProject/barrel/_checkouts/rebar3_path_deps",
         undefined,checkout,false,true,true,undefined,false}],
    [],
    [rebar_compiler_xrl,rebar_compiler_yrl,rebar_compiler_mib,
     rebar_compiler_erl],
    [],
    [{resource,hg,rebar_hg_resource,#{},rebar_resource_v2},
     {resource,pkg,rebar_pkg_resource,
         #{base_config =>
               #{http_adapter => hex_http_httpc,
                 http_adapter_config => #{profile => rebar},
                 http_user_agent_fragment =>
                     <<"(rebar3/3.7.0-rc2+build.4170.refa1120952) (httpc)">>},
           repos =>
               [#{api_url => <<"https://hex.pm/api">>,
                  http_adapter => hex_http_httpc,
                  http_adapter_config => #{profile => rebar},
                  http_user_agent_fragment =>
                      <<"(rebar3/3.7.0-rc2+build.4170.refa1120952) (httpc)">>,
                  name => <<"hexpm">>,
                  repo_public_key =>
                      <<"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApqREcFDt5vV21JVe2QNB\nEdvzk6w36aNFhVGWN5toNJRjRJ6m4hIuG4KaXtDWVLjnvct6MYMfqhC79HAGwyF+\nIqR6Q6a5bbFSsImgBJwz1oadoVKD6ZNetAuCIK84cjMrEFRkELtEIPNHblCzUkkM\n3rS9+DPlnfG8hBvGi6tvQIuZmXGCxF/73hU0/MyGhbmEjIKRtG6b0sJYKelRLTPW\nXgK7s5pESgiwf2YC/2MGDXjAJfpfCd0RpLdvd4eRiXtVlE9qO9bND94E7PgQ/xqZ\nJ1i2xWFndWa6nfFnRxZmCStCOZWYYPlaxr+FZceFbpMwzTNs4g3d4tLNUcbKAIH4\n0wIDAQAB\n-----END PUBLIC KEY-----">>,
                  repo_url => <<"https://repo.hex.pm">>,repo_verify => true}]},
         rebar_resource_v2},
     {resource,git,rebar_git_resource,#{},rebar_resource_v2}],
    [{provider,xref,rebar_prv_xref,
         {[],[]},
         true,
         [compile],
         ["Run cross reference analysis.",10,10,86,97,108,105,100,32,114,101,
          98,97,114,46,99,111,110,102,105,103,32,111,112,116,105,111,110,115,
          58,10,32,32,
          [123,["xref_warnings",44,"false"],125],
          10,32,32,
          [123,["xref_extra_paths",44,"[]"],125],
          10,32,32,
          [123,
           ["xref_checks",44,
            [91,
             ["undefined_function_calls",44,"undefined_functions",44,
              "locals_not_used",44,10,
              [32,[32,["   ",32,32,32],"   ",32,32,32],32,32],
              "exports_not_used",44,"deprecated_function_calls",44,10,
              [32,[32,["   ",32,32,32],"   ",32,32,32],32,32],
              "deprecated_functions"],
             93]],
           125],
          10,32,32,
          [123,
           ["xref_queries",44,
            [91,
             [[123,
               ["\"(xc - uc) || (xu - x - b - (\\\"mod\\\":\\\".*foo\\\"/\\\"4\\\"))\"",
                44,10,
                [32,32,[[32,"   ",32,32,32],32,"   ",32,32,32],32,32],
                "[]"],
               125]],
             93]],
           125],
          10],
         "Run cross reference analysis.","rebar3 xref",[],
         [default],
         default},
     {provider,version,rebar_prv_version,
         {[],[]},
         true,[],"Print version for rebar and current Erlang.",
         "Print version for rebar and current Erlang.","rebar3 version",[],
         [default],
         default},
     {provider,upgrade,rebar_prv_upgrade,
         {[],[]},
         true,
         [lock],
         "Upgrade project dependencies. Mentioning no application will upgrade all dependencies. To upgrade specific dependencies, their names can be listed in the command.",
         "Upgrade dependencies.","rebar3 upgrade [cowboy[,ranch]]",
         [{package,undefined,undefined,string,
              "List of packages to upgrade. If not specified, all dependencies are upgraded."}],
         [default],
         default},
     {provider,update,rebar_prv_update,
         {[],[]},
         true,[],"Update package index.","Update package index.",
         "rebar3 update",[],
         [default],
         default},
     {provider,unlock,rebar_prv_unlock,
         {[],[]},
         true,[],
         "Unlock project dependencies. Mentioning no application will unlock all dependencies. To unlock specific dependencies, their name can be listed in the command.",
         "Unlock dependencies.",[],
         [{package,undefined,undefined,string,
              "List of packages to unlock. If not specified, all dependencies are unlocked."}],
         [default],
         default},
     {provider,tar,rebar_prv_tar,
         {[],[]},
         true,
         [release],
         "Tar archive of release built of project.",
         "Tar archive of release built of project.","rebar3 tar",
         [{relname,110,"relname",string,
              "Specify the name for the release that will be generated"},
          {relvsn,118,"relvsn",string,"Specify the version for the release"},
          {goal,103,"goal",string,
              "Specify a target constraint on the system. These are usually the OTP"},
          {upfrom,117,"upfrom",string,
              "Only valid with relup target, specify the release to upgrade from"},
          {output_dir,111,"output-dir",string,
              "The output directory for the release. This is `./` by default."},
          {help,104,"help",undefined,"Print usage"},
          {lib_dir,108,"lib-dir",string,
              "Additional dir that should be searched for OTP Apps"},
          {path,112,"path",string,"Additional dir to add to the code path"},
          {default_libs,undefined,"default-libs",boolean,
              "Whether to use the default system added lib dirs (means you must add them all manually). Default is true"},
          {log_level,86,"verbose",
              {integer,2},
              "Verbosity level, maybe between 0 and 3"},
          {dev_mode,100,"dev-mode",boolean,
              "Symlink the applications and configuration into the release instead of copying"},
          {include_erts,105,"include-erts",string,
              "If true include a copy of erts used to build with, if a path include erts at that path. If false, do not include erts"},
          {override,97,"override",string,
              "Provide an app name and a directory to override in the form <appname>:<app directory>"},
          {config,99,"config",{string,[]},"The path to a config file"},
          {overlay_vars,undefined,"overlay_vars",string,
              "Path to a file of overlay variables"},
          {vm_args,undefined,"vm_args",string,
              "Path to a file to use for vm.args"},
          {sys_config,undefined,"sys_config",string,
              "Path to a file to use for sys.config"},
          {system_libs,undefined,"system_libs",string,
              "Path to dir of Erlang system libs"},
          {version,undefined,"version",undefined,"Print relx version"},
          {root_dir,114,"root",string,"The project root directory"}],
         [default],
         default},
     {provider,state,rebar_prv_state,
         {[],[]},
         false,[],"Display rebar configuration for debugging purpose",
         "Print current configuration state","rebar3 state",[],
         [default],
         default},
     {provider,shell,rebar_prv_shell,
         {[],[]},
         true,
         [compile],
         "Start a shell with project and deps preloaded similar to~n'erl -pa ebin -pa deps/*/ebin'.~n",
         "Run shell with project apps and deps in path.","rebar3 shell",
         [{config,undefined,"config",string,
              "Path to the config file to use. Defaults to {shell, [{config, File}]} and then the relx sys.config file if not specified."},
          {name,undefined,"name",atom,"Gives a long name to the node."},
          {sname,undefined,"sname",atom,"Gives a short name to the node."},
          {setcookie,undefined,"setcookie",atom,
              "Sets the cookie if the node is distributed."},
          {script_file,undefined,"script",string,
              "Path to an escript file to run before starting the project apps. Defaults to rebar.config {shell, [{script_file, File}]} if not specified."},
          {apps,undefined,"apps",string,
              "A list of apps to boot before starting the shell. (E.g. --apps app1,app2,app3) Defaults to rebar.config {shell, [{apps, Apps}]} or relx apps if not specified."},
          {start_clean,undefined,"start-clean",boolean,
              "Cancel any applications in the 'apps' list or release."},
          {user_drv_args,undefined,"user_drv_args",string,
              "Arguments passed to user_drv start function for creating custom shells."}],
         [default],
         default},
     {provider,repos,rebar_prv_repos,
         {[],[]},
         false,[],"Display repository configuration for debugging purpose",
         "Print current package repository configuration","rebar3 repos",[],
         [default],
         default},
     {provider,report,rebar_prv_report,
         {[],[]},
         true,[],
         "Provide a crash report to be sent to the rebar3 issues page.",
         "Provide a crash report to be sent to the rebar3 issues page.",
         "rebar3 report \"<task>\"",
         [{task,undefined,undefined,string,"Task to print details for."}],
         [default],
         default},
     {provider,relup,rebar_prv_relup,
         {[],[]},
         true,
         [release],
         "Create relup of releases.","Create relup of releases.",
         "rebar3 relup",
         [{relname,110,"relname",string,
              "Specify the name for the release that will be generated"},
          {relvsn,118,"relvsn",string,"Specify the version for the release"},
          {goal,103,"goal",string,
              "Specify a target constraint on the system. These are usually the OTP"},
          {upfrom,117,"upfrom",string,
              "Only valid with relup target, specify the release to upgrade from"},
          {output_dir,111,"output-dir",string,
              "The output directory for the release. This is `./` by default."},
          {help,104,"help",undefined,"Print usage"},
          {lib_dir,108,"lib-dir",string,
              "Additional dir that should be searched for OTP Apps"},
          {path,112,"path",string,"Additional dir to add to the code path"},
          {default_libs,undefined,"default-libs",boolean,
              "Whether to use the default system added lib dirs (means you must add them all manually). Default is true"},
          {log_level,86,"verbose",
              {integer,2},
              "Verbosity level, maybe between 0 and 3"},
          {dev_mode,100,"dev-mode",boolean,
              "Symlink the applications and configuration into the release instead of copying"},
          {include_erts,105,"include-erts",string,
              "If true include a copy of erts used to build with, if a path include erts at that path. If false, do not include erts"},
          {override,97,"override",string,
              "Provide an app name and a directory to override in the form <appname>:<app directory>"},
          {config,99,"config",{string,[]},"The path to a config file"},
          {overlay_vars,undefined,"overlay_vars",string,
              "Path to a file of overlay variables"},
          {vm_args,undefined,"vm_args",string,
              "Path to a file to use for vm.args"},
          {sys_config,undefined,"sys_config",string,
              "Path to a file to use for sys.config"},
          {system_libs,undefined,"system_libs",string,
              "Path to dir of Erlang system libs"},
          {version,undefined,"version",undefined,"Print relx version"},
          {root_dir,114,"root",string,"The project root directory"}],
         [default],
         default},
     {provider,release,rebar_prv_release,
         {[],[]},
         true,
         [compile],
         "Build release of project.","Build release of project.",
         "rebar3 release",
         [{relname,110,"relname",string,
              "Specify the name for the release that will be generated"},
          {relvsn,118,"relvsn",string,"Specify the version for the release"},
          {goal,103,"goal",string,
              "Specify a target constraint on the system. These are usually the OTP"},
          {upfrom,117,"upfrom",string,
              "Only valid with relup target, specify the release to upgrade from"},
          {output_dir,111,"output-dir",string,
              "The output directory for the release. This is `./` by default."},
          {help,104,"help",undefined,"Print usage"},
          {lib_dir,108,"lib-dir",string,
              "Additional dir that should be searched for OTP Apps"},
          {path,112,"path",string,"Additional dir to add to the code path"},
          {default_libs,undefined,"default-libs",boolean,
              "Whether to use the default system added lib dirs (means you must add them all manually). Default is true"},
          {log_level,86,"verbose",
              {integer,2},
              "Verbosity level, maybe between 0 and 3"},
          {dev_mode,100,"dev-mode",boolean,
              "Symlink the applications and configuration into the release instead of copying"},
          {include_erts,105,"include-erts",string,
              "If true include a copy of erts used to build with, if a path include erts at that path. If false, do not include erts"},
          {override,97,"override",string,
              "Provide an app name and a directory to override in the form <appname>:<app directory>"},
          {config,99,"config",{string,[]},"The path to a config file"},
          {overlay_vars,undefined,"overlay_vars",string,
              "Path to a file of overlay variables"},
          {vm_args,undefined,"vm_args",string,
              "Path to a file to use for vm.args"},
          {sys_config,undefined,"sys_config",string,
              "Path to a file to use for sys.config"},
          {system_libs,undefined,"system_libs",string,
              "Path to dir of Erlang system libs"},
          {version,undefined,"version",undefined,"Print relx version"},
          {root_dir,114,"root",string,"The project root directory"}],
         [default],
         default},
     {provider,upgrade,rebar_prv_plugins_upgrade,
         {[],[]},
         true,[],"List or upgrade plugins","Upgrade plugins",
         "rebar3 plugins upgrade <plugin>",
         [{plugin,undefined,undefined,string,"Plugin to upgrade"}],
         [default],
         plugins},
     {provider,list,rebar_prv_plugins,
         {[],[]},
         true,[],"List local and global plugins for this project",
         "List local and global plugins for this project",
         "rebar3 plugins list",[],
         [default],
         plugins},
     {provider,path,rebar_prv_path,
         {[],[]},
         true,
         [app_discovery],
         "Print paths to build dirs in current profile.",
         "Print paths to build dirs in current profile.","rebar3 path",
         [{app,undefined,"app",string,
              "Comma separated list of applications to return paths for."},
          {base,undefined,"base",boolean,
              "Return the `base' path of the current profile."},
          {bin,undefined,"bin",boolean,
              "Return the `bin' path of the current profile."},
          {ebin,undefined,"ebin",boolean,
              "Return all `ebin' paths of the current profile's applications."},
          {lib,undefined,"lib",boolean,
              "Return the `lib' path of the current profile."},
          {priv,undefined,"priv",boolean,
              "Return the `priv' path of the current profile's applications."},
          {separator,115,"separator",string,
              "In case of multiple return paths, the separator character to use to join them."},
          {src,undefined,"src",boolean,
              "Return the `src' path of the current profile's applications."},
          {rel,undefined,"rel",boolean,
              "Return the `rel' path of the current profile."}],
         [default],
         default},
     {provider,pkgs,rebar_prv_packages,
         {[],[]},
         true,[],
         ["List information for a package",46,10],
         "List information for a package.","rebar3 pkgs elli",
         [{package,undefined,undefined,string,
              "Package to fetch information for."}],
         [default],
         default},
     {provider,new,rebar_prv_new,
         {[],[]},
         true,[],
         "Create rebar3 project based on template and vars.\n\nValid command line options:\n  <template> [var=foo,...]\n",
         "Create new project from templates.","rebar3 new <template>",
         [{force,102,"force",undefined,"overwrite existing files"}],
         [default],
         default},
     {provider,lock,rebar_prv_lock,
         {[],[]},
         false,
         [install_deps],
         "Locks dependencies","Locks dependencies.",[],[],
         [default],
         default},
     {provider,upgrade,rebar_prv_local_upgrade,
         {[],[]},
         true,[],[],"Download latest rebar3 escript and extract.",
         "rebar3 unstable upgrade",[],
         [default],
         local},
     {provider,install,rebar_prv_local_install,
         {[],[]},
         true,[],[],
         "Extract libs from rebar3 escript along with a run script.",
         "rebar3 unstable install",[],
         [default],
         local},
     {provider,install_deps,rebar_prv_install_deps,
         {[],[]},
         false,
         [app_discovery],
         [],[],undefined,[],
         [default],
         default},
     {provider,help,rebar_prv_help,
         {[],[]},
         true,[],
         "Display a list of tasks or help for a given task or subtask.",
         "Display a list of tasks or help for a given task or subtask.",
         "rebar3 help <task>",
         [{help_task,undefined,undefined,string,"Task to print help for."}],
         [default],
         default},
     {provider,'get-deps',rebar_prv_get_deps,
         {[],[]},
         true,
         [lock],
         "Fetch project dependencies.","Fetch dependencies.",
         "rebar3 get-deps",[],[],default},
     {provider,eunit,rebar_prv_eunit,
         {[],[]},
         true,
         [lock],
         "Run EUnit Tests.","Run EUnit Tests.","rebar3 eunit",
         [{app,undefined,"app",string,
              "Comma separated list of application test suites to run. Equivalent to `[{application, App}]`."},
          {application,undefined,"application",string,
              "Comma separated list of application test suites to run. Equivalent to `[{application, App}]`."},
          {cover,99,"cover",boolean,"Generate cover data. Defaults to false."},
          {cover_export_name,undefined,"cover_export_name",string,
              "Base name of the coverdata file to write"},
          {dir,100,"dir",string,
              "Comma separated list of dirs to load tests from. Equivalent to `[{dir, Dir}]`."},
          {file,102,"file",string,
              "Comma separated list of files to load tests from. Equivalent to `[{file, File}]`."},
          {module,109,"module",string,
              "Comma separated list of modules to load tests from. Equivalent to `[{module, Module}]`."},
          {suite,115,"suite",string,
              "Comma separated list of modules to load tests from. Equivalent to `[{module, Module}]`."},
          {verbose,118,"verbose",boolean,"Verbose output. Defaults to false."},
          {name,undefined,"name",atom,"Gives a long name to the node"},
          {sname,undefined,"sname",atom,"Gives a short name to the node"},
          {setcookie,undefined,"setcookie",atom,
              "Sets the cookie if the node is distributed"}],
         [test],
         default},
     {provider,escriptize,rebar_prv_escriptize,
         {[],[]},
         true,
         [compile],
         "Generate an escript executable containing the project's and its dependencies' BEAM files.",
         "Generate escript archive.","rebar3 escriptize",[],
         [default],
         default},
     {provider,edoc,rebar_prv_edoc,
         {[],[]},
         true,
         [compile],
         "Generate documentation using edoc.",
         "Generate documentation using edoc.","rebar3 edoc",[],
         [docs],
         default},
     {provider,do,rebar_prv_do,
         {[],[]},
         true,[],
         "Higher order provider for running multiple tasks in a sequence.",
         "Higher order provider for running multiple tasks in a sequence.",
         "rebar3 do <task1>, <task2>, ...",[],
         [default],
         default},
     {provider,dialyzer,rebar_prv_dialyzer,
         {[],[]},
         true,
         [compile],
         "Run the Dialyzer analyzer on the project.\n\nThis command will build, and keep up-to-date, a suitable PLT and will use it to carry out success typing analysis on the current project.\n\nThe following (optional) configurations can be added to a `proplist` of options `dialyzer` in rebar.config:\n`warnings` - a list of dialyzer warnings\n`get_warnings` - display warnings when altering a PLT file (boolean)\n`plt_apps` - the strategy for determining the applications which included in the PLT file, `top_level_deps` to include just the direct dependencies or `all_deps` to include all nested dependencies*\n`plt_extra_apps` - a list of extra applications to include in the PLT file\n`plt_extra_mods` - a list of extra modules to includes in the PLT file\n`plt_location` - the location of the PLT file, `local` to store in the profile's base directory (default) or a custom directory.\n`plt_prefix` - the prefix to the PLT file, defaults to \"rebar3\"**\n`base_plt_apps` - a list of applications to include in the base PLT file***\n`base_plt_mods` - a list of modules to include in the base PLT file***\n`base_plt_location` - the location of base PLT file, `global` to store in $HOME/.cache/rebar3 (default) or  a custom directory***\n`base_plt_prefix` - the prefix to the base PLT file, defaults to \"rebar3\"** ***\n`exclude_apps` - a list of applications to exclude from PLT files and success typing analysis, `plt_extra_mods` and `base_plt_mods` can add modules from excluded applications\n`exclude_mods` - a list of modules to exclude from PLT files and success typing analysis\n\nFor example, to warn on unmatched returns: \n{dialyzer, [{warnings, [unmatched_returns]}]}.\n\n*The direct dependent applications are listed in `applications` and `included_applications` of their .app files.\n**PLT files are named \"<prefix>_<otp_release>_plt\".\n***The base PLT is a PLT containing the core applications often required for a project's PLT. One base PLT is created per OTP version and stored in `base_plt_location`. A base PLT is used to build project PLTs.\n",
         "Run the Dialyzer analyzer on the project.","rebar3 dialyzer",
         [{update_plt,117,"update-plt",boolean,
              "Enable updating the PLT. Default: true"},
          {succ_typings,115,"succ-typings",boolean,
              "Enable success typing analysis. Default: true"}],
         [default],
         default},
     {provider,tree,rebar_prv_deps_tree,
         {[],[]},
         true,
         [lock],
         [],"Print dependency tree.","rebar3 tree",
         [{verbose,118,"verbose",undefined,
              "Print repo and branch/tag/ref for git and hg deps"}],
         [default],
         default},
     {provider,deps,rebar_prv_deps,
         {[],[]},
         true,
         [app_discovery],
         "List dependencies. Those not matching lock files are followed by an asterisk (*).",
         "List dependencies","rebar3 deps",[],
         [default],
         default},
     {provider,cover,rebar_prv_cover,
         {[],[]},
         true,
         [lock],
         "Perform coverage analysis.","Perform coverage analysis.",
         "rebar3 cover",
         [{reset,114,"reset",boolean,"Reset all coverdata."},
          {verbose,118,"verbose",boolean,"Print coverage analysis."},
          {min_coverage,109,"min_coverage",integer,
              "Mandate a coverage percentage required to succeed (0..100)"}],
         [test],
         default},
     {provider,compile,rebar_prv_compile,
         {[],[]},
         true,
         [lock],
         "Compile apps .app.src and .erl files.",
         "Compile apps .app.src and .erl files.","rebar3 compile",
         [{deps_only,100,"deps_only",undefined,
              "Only compile dependencies, no project apps will be built."}],
         [default],
         default},
     {provider,ct,rebar_prv_common_test,
         {[],[]},
         true,
         [lock],
         "Run Common Tests.","Run Common Tests.","rebar3 ct",
         [{dir,undefined,"dir",string,
              "List of additional directories containing test suites"},
          {suite,undefined,"suite",string,"List of test suites to run"},
          {group,undefined,"group",string,"List of test groups to run"},
          {testcase,undefined,"case",string,"List of test cases to run"},
          {label,undefined,"label",string,"Test label"},
          {config,undefined,"config",string,"List of config files"},
          {spec,undefined,"spec",string,"List of test specifications"},
          {join_specs,undefined,"join_specs",boolean,
              "Merge all test specifications and perform a single test run"},
          {allow_user_terms,undefined,"allow_user_terms",boolean,
              "Allow user defined config values in config files"},
          {logdir,undefined,"logdir",string,"Log folder"},
          {logopts,undefined,"logopts",string,
              "Options for common test logging"},
          {verbosity,undefined,"verbosity",integer,"Verbosity"},
          {cover,99,"cover",{boolean,false},"Generate cover data"},
          {cover_export_name,undefined,"cover_export_name",string,
              "Base name of the coverdata file to write"},
          {repeat,undefined,"repeat",integer,"How often to repeat tests"},
          {duration,undefined,"duration",string,
              "Max runtime (format: HHMMSS)"},
          {until,undefined,"until",string,"Run until (format: HHMMSS)"},
          {force_stop,undefined,"force_stop",string,
              "Force stop on test timeout (true | false | skip_rest)"},
          {basic_html,undefined,"basic_html",boolean,"Show basic HTML"},
          {stylesheet,undefined,"stylesheet",string,
              "CSS stylesheet to apply to html output"},
          {decrypt_key,undefined,"decrypt_key",string,
              "Path to key for decrypting config"},
          {decrypt_file,undefined,"decrypt_file",string,
              "Path to file containing key for decrypting config"},
          {abort_if_missing_suites,undefined,"abort_if_missing_suites",
              {boolean,true},
              "Abort if suites are missing"},
          {multiply_timetraps,undefined,"multiply_timetraps",integer,[]},
          {scale_timetraps,undefined,"scale_timetraps",boolean,
              "Scale timetraps"},
          {create_priv_dir,undefined,"create_priv_dir",string,
              "Create priv dir (auto_per_run | auto_per_tc | manual_per_tc)"},
          {include,undefined,"include",string,
              "Directories containing additional include files"},
          {readable,undefined,"readable",string,
              "Shows test case names and only displays logs to shell on failures (true | compact | false)"},
          {verbose,118,"verbose",boolean,"Verbose output"},
          {name,undefined,"name",atom,"Gives a long name to the node"},
          {sname,undefined,"sname",atom,"Gives a short name to the node"},
          {setcookie,undefined,"setcookie",atom,
              "Sets the cookie if the node is distributed"},
          {sys_config,undefined,"sys_config",string,
              "List of application config files"},
          {compile_only,undefined,"compile_only",boolean,
              "Compile modules in the project with the test configuration but do not run the tests"},
          {retry,undefined,"retry",boolean,
              "Experimental feature. If any specification for previously failing test is found, runs them."}],
         [test],
         default},
     {provider,clean,rebar_prv_clean,
         {[],[]},
         true,
         [app_discovery,install_deps],
         "Remove compiled beam files from apps.",
         "Remove compiled beam files from apps.","rebar3 clean",
         [{all,97,"all",undefined,"Clean all apps include deps"},
          {profile,112,"profile",string,
              "Clean under profile. Equivalent to `rebar3 as <profile> clean`"}],
         [default],
         default},
     {provider,compile,rebar_prv_bare_compile,
         {[],[]},
         false,
         [{default,app_discovery}],
         [],[],[],
         [{paths,112,"paths",string,
              "Wildcard paths of ebin directories to add to code path, separated by a colon"},
          {separator,115,"separator",string,
              "In case of multiple return paths, the separator character to use to join them."}],
         [default],
         bare},
     {provider,as,rebar_prv_as,
         {[],[]},
         true,[],
         "Higher order provider for running multiple tasks in a sequence as a certain profiles.",
         "Higher order provider for running multiple tasks in a sequence as a certain profiles.",
         "rebar3 as <profile1>,<profile2>,... <task1>, <task2>, ...",
         [{profile,undefined,undefined,string,"Profiles to run as."}],
         [default],
         default},
     {provider,app_discovery,rebar_prv_app_discovery,
         {[],[]},
         false,[],[],[],[],[],
         [default],
         default},
     {provider,run,rebar3_run,
         {[],[]},
         false,
         [release],
         [],"Run release console.","rebar3 run",[],
         [default],
         default},
     {provider,publish,rebar3_hex_pkg,
         {[],[]},
         true,
         [{default,lock}],
         [],"Publish a new version of your package and update the package",
         "rebar3 hex publish",
         [{revert,undefined,"revert",string,"Revert given version."}],
         [default],
         hex},
     {provider,search,rebar3_hex_search,
         {[],[]},
         true,[],[],"Display packages matching the given search query",
         "rebar3 hex search <term>",
         [{term,undefined,undefined,string,"Search term."}],
         [default],
         hex},
     {provider,docs,rebar3_hex_docs,
         {[],[]},
         true,
         [{default,edoc}],
         [],"Publish documentation for the current project and version",
         "rebar3 hex docs",
         [{revert,undefined,"revert",string,"Revert given version."}],
         [default],
         hex},
     {provider,owner,rebar3_hex_owner,
         {[],[]},
         true,[],[],"Add, remove or list package owners","rebar3 hex owner",
         [],
         [default],
         hex},
     {provider,info,rebar3_hex_info,
         {[],[]},
         true,[],[],"Prints hex package or system information",
         "rebar3 hex user <command>",[],
         [default],
         hex},
     {provider,key,rebar3_hex_key,
         {[],[]},
         true,[],[],"Remove or list API keys associated with your account",
         "rebar3 hex key [list | remove <key>]",[],
         [default],
         hex},
     {provider,config,rebar3_hex_config,
         {[],[]},
         true,[],[],"Read or update hex configuration file",
         "rebar3 hex config <key> [<value>]",[],
         [default],
         hex},
     {provider,cut,rebar3_hex_cut,
         {[],[]},
         true,
         [{default,lock}],
         [],"Increment version number and publish package","rebar3 hex cut",
         [{increment,105,"increment",string,
              "Type of semver increment: major, minor or patch"}],
         [default],
         hex},
     {provider,user,rebar3_hex_user,
         {[],[]},
         true,[],[],"Hex user tasks","rebar3 hex user <command>",[],
         [default],
         hex}],
    false}